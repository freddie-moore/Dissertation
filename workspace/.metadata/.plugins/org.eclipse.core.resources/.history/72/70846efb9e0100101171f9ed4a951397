/*********************************************
 * OPL 22.1.2.0 Model
 * Author: fredd
 * Creation Date: 15 Feb 2025 at 18:09:32
 *********************************************/
int L = 5; // Discretized time step length
int T = 50 div L;  // Number of timesteps
int E = 4;    // Number of lanes
float GREEN_Y = 0.38 * L;    // Fraction of a vehicle that can leave per discretized time step
float YELLOW_Y = 0.1 * L;

// Define ranges for indexing
range Time = 0..T-1; // Time steps range
range Lanes = 0..E-1; // Lanes range

int A[Lanes][Time] = ...;

// Conflict matrix: C[i][j] = 1 means signals i and j conflict
int C[Lanes][Lanes] = ...;

// Decision Variables
dvar boolean x[Lanes][Time]; // x(e,t) = 1 if lane e is green at time t
//dvar boolean y[Lanes][Time]; // y(e,t) = 1 if lane e is yellow at time t
dvar float+ q[Lanes][Time]; // Queue length at lane e, time t
dvar float+ d[Lanes][Time]; // Vehicles that depart from lane e at time t

// Objective Function: Minimizing cumulative queue length
minimize sum(t in Time, e in Lanes) q[e][t];

// Constraints
subject to {
    // Queue evolution equation
    forall(e in Lanes, t in 0..T-2)
    	q[e][t+1] >= q[e][t] - d[e][t] + A[e][t];
    
    // Max cars that leave a queue must be <= queue length
    forall(e in Lanes, t in Time)
        d[e][t] <= q[e][t];
        
    // Cars can only leave a queue if the respective signal is green or yellow, at a rate of y
    forall(e in Lanes, t in Time)
        d[e][t] <= GREEN_Y * x[e][t]; // + YELLOW_Y * y[e][t];
       
//    // Ensure y[e][t] is 1 before and after a green transition
//	forall(e in Lanes, t in 1..T-1)
//	    y[e][t] >= x[e][t] - x[e][t-1];  // If x transitions from 0 to 1, y[e][t] must be 1
//	
//	forall(e in Lanes, t in 0..T-2)
//	    y[e][t] >= x[e][t] - x[e][t+1];  // If x transitions from 1 to 0, y[e][t] must be 1
//	    
//    // A phase is either green or yellow, but not both
//	forall(e in Lanes, t in Time)
//	    x[e][t] + y[e][t] <= 1; 
	    
    // Conflicting signals cannot be active at the same time
    forall(e1 in Lanes, e2 in Lanes : C[e1][e2] == 1, t in Time)
        x[e1][t] + x[e2][t] <= 1;
}	